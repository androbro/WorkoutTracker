generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  primaryMuscle     MuscleType        @relation("PrimaryMuscle", fields: [primaryMuscleId], references: [id])
  primaryMuscleId   Int
  secondaryMuscle   MuscleType?       @relation("SecondaryMuscle", fields: [secondaryMuscleId], references: [id])
  secondaryMuscleId Int?
  equipment         WorkoutEquipment  @relation(fields: [equipmentId], references: [id])
  equipmentId       Int
  difficulty        String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  WorkoutExercise   WorkoutExercise[]
}

model MuscleType {
  id                 Int        @id @default(autoincrement())
  name               String     @unique
  primaryExercises   Exercise[] @relation("PrimaryMuscle")
  secondaryExercises Exercise[] @relation("SecondaryMuscle")
}

model WorkoutEquipment {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  type      EquipmentType
  category  EquipmentCategory
  location  EquipmentLocation
  exercises Exercise[]
}

model Workout {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  WorkoutExercise WorkoutExercise[]
}

model WorkoutExercise {
  id                Int      @id @default(autoincrement())
  workout           Workout  @relation(fields: [workoutId], references: [id])
  workoutId         Int
  exercise          Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId        Int
  order             Int
  sets              Int
  reps              Int
  weight            Float    @default(0)
  minutesToComplete Int
  restBetweenSets   Int
  notes             String?
}

model Card {
  id               Int       @id @default(autoincrement())
  title            String
  totalScore       Float
  percentageChange Float
  period           DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relation to CardDataPoint
  dataPoints CardDataPoint[]

  // Relation to CardChart
  chart         CardChart?
  CardChartData CardChartData?
}

model CardDataPoint {
  id     Int      @id @default(autoincrement())
  date   DateTime
  score  Float
  cardId Int
  card   Card     @relation(fields: [cardId], references: [id])
}

model CardChart {
  id                  Int     @id @default(autoincrement())
  label               String
  data                Float[]
  fill                Boolean
  borderColor         String?
  tension             Float
  pointRadius         Float
  showLegend          Boolean @default(true)
  showXAxis           Boolean @default(true)
  showYAxis           Boolean @default(true)
  maintainAspectRatio Boolean @default(true)
  responsive          Boolean @default(true)
  width               Int?
  height              Int?
  cardId              Int     @unique
  card                Card    @relation(fields: [cardId], references: [id])
}

model CardChartData {
  id          Int     @id @default(autoincrement())
  label       String
  data        Float[]
  fill        Boolean
  borderColor String?
  tension     Float
  pointRadius Float
  cardId      Int     @unique
  card        Card    @relation(fields: [cardId], references: [id])
}

enum EquipmentType {
  MACHINE
  CABLE
  SMITH_MACHINE
  TRAP_BAR
  BARBELL
  EZ_BAR
  DUMBELLS
  KETTLEBELLS
  RESISTANCE_BANDS
  TRX
  BODYWEIGHT
  MISC
  CARDIO
}

enum EquipmentCategory {
  CARDIO
  STRENGTH
  BALANCE
  FLEXIBILITY
  RECOVERY
}

enum EquipmentLocation {
  HOME
  GYM
  OUTDOOR
}
